---
import Layout from '../layouts/Layout.astro';
import { auth } from '../utils/auth';

// Check authentication
const authInstance = await auth(Astro.locals.runtime.env);
const session = await authInstance.api.getSession({
  headers: Astro.request.headers,
});

if (!session?.user) {
  return Astro.redirect('/login');
}
---

<!-- Import Uppy CSS -->
<link href="https://releases.transloadit.com/uppy/v3.21.0/uppy.min.css" rel="stylesheet">

<Layout title="File Manager">
  <div class="min-h-screen bg-gray-50 py-12 px-4">
    <div class="max-w-6xl mx-auto">
      <div class="bg-white rounded-lg shadow-md p-8">
        <h1 class="text-3xl font-bold text-center mb-8 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent font-wf-visual-sans-semibold">
          File Manager
        </h1>
        <p class="text-center text-gray-600 mb-8">
          Upload and manage your files for use in Webflow sites
        </p>

        <!-- Status Message -->
        <div id="statusMessage" class="hidden p-4 mb-6 rounded-md"></div>

        <!-- Upload Section -->
        <div class="mb-8">
          <h2 class="text-xl font-semibold mb-4">Upload New File</h2>
          <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 bg-gray-50">
            <!-- Uppy Dashboard -->
            <div id="uppy-dashboard"></div>
            
            <!-- Uppy Progress Bar -->
            <div id="uppy-progress" class="mt-4"></div>
          </div>
        </div>

        <!-- Files List -->
        <div>
          <h2 class="text-xl font-semibold mb-4">Your Files</h2>
          <div id="filesList">
            <div class="text-center py-12 text-gray-500">
              <div class="text-4xl mb-4">ðŸ“‚</div>
              <p>Loading files...</p>
              <div class="mt-4">
                <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Back Button -->
        <div class="mt-8 text-center">
          <a
            href={import.meta.env.BASE_URL + "/"}
            class="bg-gray-600 text-white px-6 py-3 rounded-md font-medium hover:bg-gray-700 transition-colors inline-block"
          >
            Back to Home
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Custom Uppy styling to match your design */
  .uppy-Dashboard {
    border: none !important;
    border-radius: 0.5rem !important;
    box-shadow: none !important;
  }

  .uppy-Dashboard-inner {
    border: none !important;
    border-radius: 0.5rem !important;
  }

  .uppy-Dashboard-dropzone {
    border: 2px dashed #d1d5db !important;
    border-radius: 0.5rem !important;
    background-color: #f9fafb !important;
  }

  .uppy-Dashboard-dropzone.is-dragenter {
    border-color: #3b82f6 !important;
    background-color: #eff6ff !important;
  }

  .uppy-Dashboard-AddFiles {
    background-color: transparent !important;
    border: none !important;
    color: #6b7280 !important;
  }

  .uppy-Dashboard-AddFiles:hover {
    background-color: transparent !important;
    color: #374151 !important;
  }

  .uppy-ProgressBar {
    border-radius: 0.5rem !important;
    background-color: #e5e7eb !important;
  }

  .uppy-ProgressBar-bar {
    background-color: #3b82f6 !important;
    border-radius: 0.5rem !important;
  }

  .uppy-Dashboard-Item {
    border-radius: 0.5rem !important;
    border: 1px solid #e5e7eb !important;
  }

  .uppy-Dashboard-Item-preview {
    border-radius: 0.5rem !important;
  }
</style>

<script>
  import { uppyR2S3Uploader } from '../utils/uppy-r2-s3';
  import Dashboard from '@uppy/dashboard';
  import ProgressBar from '@uppy/progress-bar';
  import {
    listFiles,
    deleteFile,
    getFileTypeCategory,
    formatFileSize,
    getFileIcon,
  } from '../utils/file-api.js';

  // DOM elements
  const statusMessage = document.getElementById('statusMessage') as HTMLElement;
  const filesList = document.getElementById('filesList') as HTMLElement;

  // Initialize Uppy with R2 S3 support
  const uppy = uppyR2S3Uploader.getUppy();

  // Add Dashboard plugin
  uppy.use(Dashboard, {
    inline: true,
    target: '#uppy-dashboard',
    height: 300,
    showProgressDetails: true,
    proudlyDisplayPoweredByUppy: false,
    theme: 'light',
    width: '100%',
  });

  // Add Progress Bar plugin
  uppy.use(ProgressBar, {
    target: '#uppy-progress',
    hideAfterFinish: true, // Hide after finish to avoid duplicate
  });

  // Initialize
  loadFiles();

  // Get base URL for navigation
  const baseUrl = import.meta.env.BASE_URL;

  function showStatus(text: string, type: 'success' | 'error' | 'info') {
    if (!statusMessage) return;
    
    statusMessage.textContent = text;
    statusMessage.className = `p-4 mb-6 rounded-md ${
      type === 'success'
        ? 'bg-green-100 text-green-700 border border-green-200'
        : type === 'error'
        ? 'bg-red-100 text-red-700 border border-red-200'
        : 'bg-blue-100 text-blue-700 border border-blue-200'
    }`;
    statusMessage.classList.remove('hidden');
    
    setTimeout(() => {
      statusMessage.classList.add('hidden');
    }, 5000);
  }

  async function loadFiles() {
    try {
      const response = await listFiles();
      if (response.success && response.files) {
        renderFiles(response.files);
      } else {
        showStatus(response.error || 'Failed to load files', 'error');
        renderEmptyState();
      }
    } catch (error) {
      showStatus('Failed to load files', 'error');
      renderEmptyState();
    }
  }

  function renderFiles(files: any[]) {
    if (!filesList) return;

    if (files.length === 0) {
      renderEmptyState();
      return;
    }

    const filesHtml = files.map(file => `
      <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
        <div class="flex items-start justify-between mb-3">
          <div class="text-2xl">${getFileIcon(file.contentType)}</div>
          <button
            onclick="handleDelete('${file.key}', '${file.filename}')"
            class="text-red-500 hover:text-red-700 text-sm"
            id="delete-${file.key}"
          >
            Delete
          </button>
        </div>
        
        <h3 class="font-medium text-gray-900 mb-1 truncate" title="${file.filename}">
          ${file.filename}
        </h3>
        
        <p class="text-sm text-gray-600 mb-2">
          ${formatFileSize(file.fileSize)} â€¢ ${getFileTypeCategory(file.contentType)}
        </p>
        
        <p class="text-xs text-gray-500 mb-3">
          Uploaded ${(() => {
            try {
              const date = new Date(file.uploadedAt);
              return isNaN(date.getTime()) 
                ? 'Recently' 
                : `${date.toLocaleDateString()} at ${date.toLocaleTimeString()}`;
            } catch (e) {
              return 'Recently';
            }
          })()}
        </p>
        
        <div class="flex gap-2">
          <button
            onclick="openFile('${file.url}')"
            class="flex-1 px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Open
          </button>
          <button
            onclick="copyToClipboard('${file.url}')"
            class="px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
            id="copy-${file.key}"
          >
            Copy URL
          </button>
        </div>
      </div>
    `).join('');

    filesList.innerHTML = `
      <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        ${filesHtml}
      </div>
    `;
  }

  function renderEmptyState() {
    if (!filesList) return;
    
    filesList.innerHTML = `
      <div class="text-center py-12 text-gray-500">
        <div class="text-4xl mb-4">ðŸ“‚</div>
        <p>No files uploaded yet</p>
        <p class="text-sm">Upload your first file to get started</p>
      </div>
    `;
  }

  // Custom upload handler for signed URL approach
  uppy.on('file-added', async (file: any) => {
    try {
      showStatus('Starting upload...', 'info');
      
      const result = await uppyR2S3Uploader.uploadFile(file.data, {
        onProgress: (progress) => {
          console.log(`Upload progress: ${progress.percent.toFixed(1)}%`);
          // You could update a progress bar here if needed
        },
      });

      if (result.success) {
        showStatus('File uploaded successfully!', 'success');
        loadFiles(); // Refresh file list
        // Remove the file from Uppy's state
        uppy.removeFile(file.id);
      } else {
        showStatus(`Upload failed: ${result.error}`, 'error');
        // Remove the file from Uppy's state
        uppy.removeFile(file.id);
      }
    } catch (error) {
      showStatus(`Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error');
      // Remove the file from Uppy's state
      uppy.removeFile(file.id);
    }
  });

  // Prevent automatic upload
  uppy.on('upload', (data) => {
    // Cancel the automatic upload since we handle it manually
    uppy.cancelAll();
  });

  async function handleDelete(key: string, filename: string) {
    if (!confirm(`Are you sure you want to delete "${filename}"?`)) return;

    try {
      const response = await deleteFile(key);
      if (response.success) {
        showStatus('File deleted successfully!', 'success');
        await loadFiles();
      } else {
        showStatus(response.error || 'Failed to delete file', 'error');
      }
    } catch (error) {
      showStatus('Failed to delete file', 'error');
    }
  }

  async function copyToClipboard(url: string) {
    try {
      await navigator.clipboard.writeText(url);
      showStatus('URL copied to clipboard!', 'success');
      
      const button = document.getElementById(`copy-${url.split('/').pop()}`);
      if (button) {
        button.textContent = 'Copied!';
        button.className = 'px-3 py-1 text-sm bg-green-600 text-white rounded';
        setTimeout(() => {
          button.textContent = 'Copy URL';
          button.className = 'px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300';
        }, 2000);
      }
    } catch (error) {
      showStatus('Failed to copy URL', 'error');
    }
  }

  function openFile(url: string) {
    window.open(url, '_blank');
  }

  // Make functions globally available for onclick handlers
  (window as any).handleDelete = handleDelete;
  (window as any).copyToClipboard = copyToClipboard;
  (window as any).openFile = openFile;
</script>
