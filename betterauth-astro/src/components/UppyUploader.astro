---
// UppyUploader.astro
---

<!-- Import Uppy CSS -->
<link href="https://releases.transloadit.com/uppy/v3.21.0/uppy.min.css" rel="stylesheet">

<div class="uppy-uploader">
  <div id="uppy-dashboard"></div>
  <div id="uppy-progress"></div>
</div>

<script>
  import { uppyUploader } from '../utils/uppy-upload';
  import Dashboard from '@uppy/dashboard';
  import ProgressBar from '@uppy/progress-bar';

  // Add Dashboard plugin
  uppyUploader.getUppy().use(Dashboard, {
    inline: true,
    target: '#uppy-dashboard',
    height: 300,
    showProgressDetails: true,
    proudlyDisplayPoweredByUppy: false,
  });

  // Add Progress Bar plugin
  uppyUploader.getUppy().use(ProgressBar, {
    target: '#uppy-progress',
    hideAfterFinish: false,
  });

  // Custom upload handler for signed URL approach
  const uppy = uppyUploader.getUppy();
  
  uppy.on('file-added', async (file: any) => {
    try {
      console.log('Starting upload...');
      
      let result;
      
      // Check file size and choose upload method
      if (file.data.size > 100 * 1024 * 1024) {
        // Large file - use multipart upload
        console.log('Large file detected, using multipart upload');
        const { uploadFileMultipart } = await import('../utils/file-api.js');
        result = await uploadFileMultipart(file.data, (progress: any) => {
          console.log(`Multipart upload progress: ${progress.percent.toFixed(1)}%`);
        });
      } else {
        // Small file - use regular upload
        result = await uppyUploader.uploadFile(file.data, {
          onProgress: (progress) => {
            console.log(`Upload progress: ${progress.percent.toFixed(1)}%`);
          },
        });
      }

      if (result.success) {
        console.log('Upload successful:', result.url);
        // Remove the file from Uppy's state
        uppy.removeFile(file.id);
      } else {
        console.error('Upload failed:', result.error);
        // Remove the file from Uppy's state
        uppy.removeFile(file.id);
      }
    } catch (error) {
      console.error('Upload error:', error);
      // Remove the file from Uppy's state
      uppy.removeFile(file.id);
    }
  });

  // Handle upload event to prevent errors
  uppy.on('upload', (data: any) => {
    console.log('Uppy upload event triggered - handling manually');
    // Since we handle uploads in file-added, we just need to prevent errors
    // The upload will be handled by our custom file-added handler
  });

  // Also handle upload-error to prevent unhandled errors
  uppy.on('upload-error', (file: any, error: any, response: any) => {
    console.log('Uppy upload error:', error);
    // Don't do anything - we handle errors in our custom upload process
  });

  // Example usage
  (window as any).uploadFile = async (file: File) => {
    try {
      const result = await uppyUploader.uploadFile(file, {
        onProgress: (progress) => {
          console.log(`Upload progress: ${progress.percent.toFixed(1)}%`);
        },
      });

      if (result.success) {
        console.log('Upload successful:', result.url);
        // Handle successful upload
      } else {
        console.error('Upload failed:', result.error);
        // Handle upload error
      }
    } catch (error) {
      console.error('Upload error:', error);
    }
  };
</script>

<style>
  .uppy-uploader {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
  }

  #uppy-dashboard {
    margin-bottom: 20px;
  }

  #uppy-progress {
    margin-top: 20px;
  }
</style>
